{"version":3,"sources":["index.es6"],"names":[],"mappings":";;AAAA,IAAI,KAAK,QAAQ,IAAR,CAAT;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;;AAEA,IAAI,SAAS,IAAI,OAAO,MAAX,EAAb;AACA,OAAO,OAAP,GAAiB;AACb,UAAM,cAAC,IAAD,EAAS;AACX,eAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;AACnC,eAAG,QAAH,CAAY,IAAZ,EAAkB,UAAU,GAAV,EAAe,IAAf,EAAqB;AACnC,oBAAG,GAAH,EAAO;AACH,2BAAO,oBAAkB,GAAzB;AACA;AACH;AACD,uBAAO,WAAP,CAAmB,IAAnB,EAAyB,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AAC7C,wBAAI,IAAJ,EAAU;AACN,+BAAO,qBAAmB,IAA1B;AACH,qBAFD,MAEK;AACD,gCAAQ,MAAR;AACH;AACJ,iBAND;AAOH,aAZD;AAaH,SAdM,CAAP;AAeH;AAjBY,CAAjB","file":"index.js","sourcesContent":["let fs = require('fs');\r\nlet xml2js = require('xml2js');\r\n\r\nlet parser = new xml2js.Parser();\r\nmodule.exports = {\r\n    read: (path)=> {\r\n        return new Promise((resolve, reject)=> {\r\n            fs.readFile(path, function (err, data) {\r\n                if(err){\r\n                    reject(\"read xml error:\"+err);\r\n                    return;\r\n                }\r\n                parser.parseString(data, function (err1, result) {\r\n                    if (err1) {\r\n                        reject(\"parse xml error:\"+err1);\r\n                    }else{\r\n                        resolve(result);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n};"]}