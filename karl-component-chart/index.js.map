{"version":3,"sources":["index.jsx"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["let React = require(\"react\");\r\nlet css = require(\"./index.css\");\r\nrequire(\"font-awesome-webpack\");\r\nlet $ = require(\"jquery\");\r\n\r\n/**\r\n * chart component,props means:\r\n */\r\nclass chart extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let data = this.sortData(this.props.data);\r\n        let yDataMax = this.getYDataMax(this.props.y, data);\r\n        let yAxisNumArr = this.getYAxisNumArr(yDataMax);\r\n        let y = this.props.y.map(d=> {\r\n            let max = 230;\r\n            let r = Math.floor(Math.random() * max);\r\n            let g = Math.floor(Math.random() * max);\r\n            let b = Math.floor(Math.random() * max);\r\n            d.color = `rgba(${r},${g},${b},1)`;\r\n            return d;\r\n        });\r\n\r\n        this.state = {\r\n            x: this.props.x,\r\n            y: y,\r\n            title: this.props.title,\r\n            yAxisText: this.props.yAxisText,\r\n            type: this.props.type ? this.props.type : \"curve\",\r\n            data: data,\r\n            lineDots: [],\r\n            yAxisNumArr: yAxisNumArr,\r\n            xUnitLength: 100 * 0.8 / data.length,\r\n            yUnitLength: 50 * 0.8 / 10,\r\n            yDataMax: yDataMax,\r\n            angleNum: this.props.angleNum ? this.props.angleNum : 12,\r\n            endPointLineLength: this.props.endPointLineLength ? this.props.endPointLineLength : 0.1\r\n        };\r\n        let bindArr = [\"sortData\", \"vectorTransformToSvg\", \"xTransformToSvg\", \"yTransformToSvg\", \"yTransformToNatural\",\r\n            \"getYAxisNumArr\", \"setActive\", \"getNearestSeries\", \"resetColor\"];\r\n        bindArr.forEach(d=> {\r\n            this[d] = this[d].bind(this);\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.state.y.forEach(d=> {\r\n            let length = this[\"curve\" + d.id].getTotalLength();\r\n            $(this[\"curve\" + d.id]).css({\r\n                \"stroke-dasharray\": length,\r\n                \"stroke-dashoffset\": length\r\n            });\r\n        });\r\n\r\n        let lineDots = this.state.y.map(d=> {\r\n            let vectors = this.state.data.map((d1, j)=> {\r\n                let id = d.id;\r\n                let x = this.xTransformToSvg(j);\r\n                let y;\r\n                if (d1.hasOwnProperty(id)) {\r\n                    y = this.yTransformToSvg(d1[id]);\r\n                } else {\r\n                    y = this.yTransformToSvg(0);\r\n                }\r\n                let vector = {x: x, y: y};\r\n                return vector;\r\n            });\r\n            return {id: d.id, vectors: vectors};\r\n        });\r\n        this.setState({\r\n            lineDots: lineDots\r\n        })\r\n\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.data) {\r\n            nextProps.data = this.sortData(nextProps.data);\r\n        }\r\n        this.setState(nextProps);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={css.base + \" react-chart\"}>\r\n                <svg viewBox=\"0 0 110 60\" onMouseMove={this.setActive} ref={(svg)=> {\r\n                    this.svg = svg;\r\n                }}>\r\n                    {\r\n                        this.state.title ? <g className={css.title}>\r\n                            <text x=\"50\" y=\"3\">{this.state.title}</text>\r\n                        </g> : \"\"\r\n                    }\r\n                    <g className={css.xAxis}>\r\n                        <path d=\"M10 55 h 80\"/>\r\n                        {\r\n                            this.state.data.map((d, i)=> {\r\n                                let w = this.state.xUnitLength;\r\n                                let x = i * w + 10;\r\n                                return <g key={i}>\r\n                                    <path d={`M${x} 55 v1`}/>\r\n                                    <text x={x + w / 2} y={60}>{d[this.state.x]}</text>\r\n                                </g>\r\n                            })\r\n                        }\r\n                    </g>\r\n                    <g className={css.yAxis}>\r\n                        {\r\n                            this.state.yAxisNumArr.map((d, i)=> {\r\n                                let y = 55 - i * this.state.yUnitLength;\r\n                                let yTextDelta = 1;\r\n                                return <text key={i} x={6} y={y - this.state.yUnitLength + yTextDelta}>{d}</text>\r\n                            })\r\n                        }\r\n                    </g>\r\n                    {\r\n                        this.state.yAxisText ? <g className={css.yAxisText}>\r\n                            <text x=\"3\" y=\"35\" transform=\"rotate(-90,3,35)\">{this.state.yAxisText}</text>\r\n                        </g> : \"\"\r\n                    }\r\n\r\n                    <g className={css.xGrid}>\r\n                        {\r\n                            this.state.yAxisNumArr.map((d, i)=> {\r\n                                let y = 55 - (i + 1) * this.state.yUnitLength;\r\n                                return <path key={i} d={`M10 ${y} h 80`}/>\r\n                            })\r\n                        }\r\n                        <path d={`M90 55 v1`}/>\r\n                    </g>\r\n                    {\r\n                        this.state.type == \"curve\" ?\r\n                            <g className={css.curve}>\r\n                                {\r\n                                    this.state.y.map((d, i)=> {\r\n                                        let lastX, lastY;\r\n                                        let path = this.state.data.map((d1, j)=> {\r\n                                            let id = d.id;\r\n                                            let x = this.xTransformToSvg(j);\r\n                                            let y;\r\n                                            let p = \"\";\r\n                                            if (d1.hasOwnProperty(id)) {\r\n                                                y = this.yTransformToSvg(d1[id]);\r\n                                            } else {\r\n                                                y = this.yTransformToSvg(0);\r\n                                            }\r\n                                            if (j == 0) {\r\n                                                p = `M ${x} ${y}`;\r\n                                            } else {\r\n                                                let {x1, y1, x2, y2} = this.getBezierCurvesVector(lastX, lastY, x, y);\r\n                                                p = `C ${x1} ${y1},${x2} ${y2},${x} ${y}`;\r\n                                            }\r\n                                            lastX = x;\r\n                                            lastY = y;\r\n                                            return p;\r\n                                        }).join(\" \");\r\n                                        let color = d.color;\r\n                                        return <path stroke={color} key={i} d={path} ref={curve=> {\r\n                                            this[\"curve\" + d.id] = curve;\r\n                                        }}/>\r\n                                    })\r\n                                }\r\n                            </g>\r\n                            : \"\"\r\n                    }\r\n\r\n                    <g className={css.dots}>\r\n                        {\r\n\r\n                            this.state.lineDots.map((d, i)=> {\r\n                                return d.vectors.map((d1, j)=> {\r\n                                    let dots = this.getDotsSymbol(i, d1.x, d1.y, \"dot\" + d.id + j);\r\n                                    return dots;\r\n                                })\r\n                            })\r\n                        }\r\n                    </g>\r\n                    <g className={css.declare}>\r\n                        {\r\n                            this.state.y.map((d, i)=> {\r\n                                let x = 91;\r\n                                let y = 15 + (40 - this.state.y.length * this.state.yUnitLength) / 2 + i * this.state.yUnitLength;\r\n                                let color = d.color;\r\n                                return <g key={i}>\r\n                                    <path stroke={color} d={`M${x} ${y} h3`}/>\r\n                                    {\r\n                                        this.getDotsSymbol(i, 92.5, y)\r\n                                    }\r\n                                    <text x=\"94.5\" y={y + 1}>{d.name}</text>\r\n                                </g>\r\n                            })\r\n                        }\r\n                        <g>\r\n                            <g title=\"reset color\" className={css.resetColor} onClick={()=> {\r\n                                this.resetColor();\r\n                            }}>\r\n                                {\r\n                                    this.state.y.map((d, i)=> {\r\n                                        let color = d.color;\r\n                                        let x = 80 + i * 1;\r\n                                        let y1 = 5;\r\n                                        let y2 = 7;\r\n                                        return <path key={i} strokeWidth={1} stroke={color}\r\n                                                     d={`M${x} ${y1} L${x} ${y2}`}/>\r\n                                    })\r\n                                }\r\n                                <text x={79.5 + this.state.y.length / 2} y=\"4\" textAnchor=\"middle\">reset color</text>\r\n                            </g>\r\n                        </g>\r\n                    </g>\r\n\r\n\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    //sort data by x axis value\r\n    sortData(d) {\r\n        let data = d.concat();\r\n        let regex = new RegExp(/^[1-2]\\d{3}-((0[1-9])|(1[0-2])|[1-9])-((0[1-9])|([1-2]\\d)|(3[0-1])|[1-9])$/);\r\n        let isDate = data.every(d1=> {\r\n            return regex.test(d1[this.props.x]);\r\n        });\r\n        if (isDate) {\r\n            data.sort((a, b)=> {\r\n                let arr1 = a[this.props.x].split(\"-\");\r\n                let arr2 = b[this.props.x].split(\"-\");\r\n                if (arr1[0] != arr2[0]) {\r\n                    return arr1[0] - arr2[0];\r\n                } else if (arr1[1] != arr2[1]) {\r\n                    return arr1[1] - arr2[1];\r\n                } else if (arr1[2] != arr2[2]) {\r\n                    return arr1[2] - arr2[2];\r\n                } else {\r\n                    return 0;\r\n                }\r\n            });\r\n        }\r\n        return data;\r\n    }\r\n\r\n    //get max y num\r\n    getYDataMax(y, data) {\r\n        let yDataMax = 0;\r\n        y.forEach(d=> {\r\n            data.filter(d1=> {\r\n                return d1.hasOwnProperty(d.id);\r\n            }).forEach(d1=> {\r\n                let d2 = d1[d.id];\r\n                yDataMax = Math.max(d2, yDataMax);\r\n            })\r\n        });\r\n        return yDataMax;\r\n    }\r\n\r\n    getYAxisNumArr(yDataMax) {\r\n        let p = 0;\r\n        if (yDataMax > 1) {\r\n            //from 10 to bigger\r\n            p++;\r\n            while (yDataMax / 10 > 1) {\r\n                yDataMax = yDataMax / 10;\r\n                p++;\r\n            }\r\n        } else {\r\n            //from 0 to lower\r\n            while (yDataMax * 10 <= 1) {\r\n                yDataMax = yDataMax * 10;\r\n                p--;\r\n            }\r\n        }\r\n\r\n        let yAxisMax = Math.pow(10, p);\r\n        let yAxisNumArr = [];\r\n        for (let i = 1; i <= 10; i++) {\r\n            let y = i * yAxisMax * 0.1;\r\n            if (p <= 0) {\r\n                y = y.toFixed(-p + 1);\r\n            }\r\n            y = Number.parseFloat(y);\r\n            yAxisNumArr.push(y);\r\n        }\r\n        return yAxisNumArr;\r\n    }\r\n\r\n    //transform vector x,y coordinates to svg coordinates\r\n    vectorTransformToSvg(vector) {\r\n        let {x, y} = vector;\r\n        let w = this.state.xUnitLength;\r\n        x = x * w + 10 + w / 2;\r\n        let yMax = this.state.yAxisNumArr[0] * 10;\r\n        y = (1 - y / yMax) * 10 * 4 + 5;\r\n        y = y + 10;\r\n        return {x: x, y: y};\r\n    }\r\n\r\n    //transform x coordinates to svg coordinates\r\n    xTransformToSvg(x) {\r\n        let w = this.state.xUnitLength;\r\n        x = x * w + 10 + w / 2;\r\n        return x;\r\n    }\r\n\r\n    //transform y coordinates to svg coordinates\r\n    yTransformToSvg(y) {\r\n        let yMax = this.state.yAxisNumArr[0] * 10;\r\n        y = (1 - y / yMax) * 10 * 4 + 5;\r\n        y = y + 10;\r\n        return y;\r\n    }\r\n\r\n    yTransformToNatural(y) {\r\n        let yMax = this.state.yAxisNumArr[0] * 10;\r\n        y = y - 10;\r\n        y = (1 - (y - 5) / (10 * 4)) * yMax;\r\n        return y;\r\n    }\r\n\r\n    //get bezier curve point x1,y1 and x2,y2\r\n    getBezierCurvesVector(lastX, lastY, x, y) {\r\n        let angleNum = this.state.angleNum;\r\n        angleNum = angleNum / 180 * Math.PI;\r\n        let endPointLineLength = this.state.endPointLineLength;\r\n        let x1, y1, x2, y2;\r\n        let pathLength = Math.sqrt(Math.pow(Math.abs(y - lastY), 2) + Math.pow(x - lastX, 2));\r\n        let length = pathLength * endPointLineLength;\r\n        let atanAngle = Math.atan(Math.abs(y - lastY) / (x - lastX));\r\n        let anglePoint1 = Math.PI - angleNum - atanAngle;\r\n        let anglePoint2 = Math.PI - angleNum - (Math.PI / 2 - atanAngle);\r\n        let anglePoint1X = Math.cos(anglePoint1) * length;\r\n        let anglePoint1Y = Math.sin(anglePoint1) * length;\r\n        let anglePoint2X = Math.sin(anglePoint2) * length;\r\n        let anglePoint2Y = Math.cos(anglePoint2) * length;\r\n        x1 = Number.parseInt(lastX - anglePoint1X);\r\n        x2 = Number.parseInt(x - anglePoint2X);\r\n        if (y > lastY) {\r\n            //line goes lower\r\n            y1 = Number.parseInt(lastY + anglePoint1Y);\r\n            y2 = Number.parseInt(y + anglePoint2Y);\r\n        } else {\r\n            //line goes higher\r\n            y1 = Number.parseInt(lastY - anglePoint1Y);\r\n            y2 = Number.parseInt(y - anglePoint2Y);\r\n        }\r\n\r\n\r\n        let vector = {\r\n            x1: x1,\r\n            y1: y1,\r\n            x2: x2,\r\n            y2: y2\r\n        };\r\n        return vector;\r\n    }\r\n\r\n    //get dots symbol\r\n    getDotsSymbol(index, x, y, ref) {\r\n        let dots, r;\r\n        let color = this.state.y[index].color;\r\n        switch (index % 5) {\r\n            //circle\r\n            case 0:\r\n                r = 0.3;\r\n                dots = (ref == undefined) ?\r\n                    <circle stroke={color} fill={color} cx={x} cy={y} r={r}/> :\r\n                    <circle stroke={color} fill={color} cx={x} cy={y} r={r} ref={d=> {\r\n                        this[ref] = d;\r\n                    }}/>;\r\n                break;\r\n            //square\r\n            case 1:\r\n                r = 0.4;\r\n                dots = (ref == undefined) ?\r\n                    <path stroke={color} fill={color} d={`M${x - r / 2} ${y - r / 2} h${r} v${r} h-${r} z`}/> :\r\n                    <path stroke={color} fill={color} d={`M${x - r / 2} ${y - r / 2} h${r} v${r} h-${r} z`} ref={d=> {\r\n                        this[ref] = d;\r\n                    }}/>;\r\n                break;\r\n            //square rotate -45 angle\r\n            case 2:\r\n                r = 0.4;\r\n                dots = (ref == undefined) ?\r\n                    <path stroke={color} fill={color} transform={`rotate(-45,${x},${y})`}\r\n                          d={`M${x - r / 2} ${y - r / 2} h${r} v${r} h-${r} z`}/> :\r\n                    <path stroke={color} fill={color} transform={`rotate(-45,${x},${y})`}\r\n                          d={`M${x - r / 2} ${y - r / 2} h${r} v${r} h-${r} z`} ref={d=> {\r\n                        this[ref] = d;\r\n                    }}/>;\r\n                break;\r\n            //triangle\r\n            case 3:\r\n                r = 0.4;\r\n                dots = (ref == undefined) ?\r\n                    <path stroke={color} fill={color} d={`M${x - r / 2} ${y + r / 2} h${r} L${x} ${y - r / 2} z`}/> :\r\n                    <path stroke={color} fill={color} d={`M${x - r / 2} ${y + r / 2} h${r} L${x} ${y - r / 2} z`}\r\n                          ref={d=> {\r\n                              this[ref] = d;\r\n                          }}/>;\r\n                break;\r\n            //inverted triangle\r\n            case 4:\r\n                r = 0.4;\r\n                dots = (ref == undefined) ?\r\n                    <path stroke={color} fill={color} d={`M${x - r / 2} ${y - r / 2} h${r} L${x} ${y + r / 2} z`}/> :\r\n                    <path stroke={color} fill={color} d={`M${x - r / 2} ${y - r / 2} h${r} L${x} ${y + r / 2} z`}\r\n                          ref={d=> {\r\n                              this[ref] = d;\r\n                          }}/>;\r\n                break;\r\n\r\n        }\r\n        return dots;\r\n    }\r\n\r\n    //set active when mouse hover\r\n    setActive(e) {\r\n        let offset = $(this.svg).offset();\r\n        let x = e.pageX - offset.left;\r\n        let y = e.pageY - offset.top;\r\n        x = x / this.svg.clientWidth * 110;\r\n        y = y / this.svg.clientHeight * 60;\r\n        let series = this.getNearestSeries(x, y);\r\n        if (series) {\r\n            $(this[\"curve\" + series]).css({\r\n                \"stroke-width\": 0.4\r\n            });\r\n            this.state.y.filter(d=> {\r\n                return d.id != series;\r\n            }).forEach(d=> {\r\n                $(this[\"curve\" + d.id]).css({\r\n                    \"stroke-width\": 0.2\r\n                });\r\n            })\r\n        } else {\r\n            this.state.y.forEach(d=> {\r\n                $(this[\"curve\" + d.id]).css({\r\n                    \"stroke-width\": 0.2\r\n                });\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * find the nearest series\r\n     * @param x svgX\r\n     * @param y svgY\r\n     * @returns {*} series\r\n     */\r\n    getNearestSeries(x, y) {\r\n        let series;\r\n        if (x >= 10 && x <= 90 && y >= 15 && y <= 55) {\r\n            let w = 80 / this.state.data.length;\r\n            //find the corresponding y by x and slope\r\n            let yMap = [];\r\n            if (x < 10 + w / 2) {\r\n                yMap = this.state.lineDots.map(d=> {\r\n                    let lineY = d.vectors[0].y;\r\n                    return {id: d.id, y: lineY};\r\n                });\r\n            } else if (x > 90 - w / 2) {\r\n                yMap = this.state.lineDots.map(d=> {\r\n                    let lineY = d.vectors[d.vectors.length - 1].y;\r\n                    return {id: d.id, y: lineY};\r\n                });\r\n            } else {\r\n                let startIndex, endIndex;\r\n                for (let i = 0; i < this.state.data.length - 1; i++) {\r\n                    let startX = 10 + i * w + w / 2;\r\n                    let endX = 10 + (i + 1) * w + w / 2;\r\n                    if (x >= startX && x <= endX) {\r\n                        startIndex = i;\r\n                        endIndex = i + 1;\r\n                        break;\r\n                    }\r\n                }\r\n                yMap = this.state.lineDots.map(d=> {\r\n                    let x1 = 10 + startIndex * w + w / 2;\r\n                    let x2 = 10 + endIndex * w + w / 2;\r\n                    let y1 = d.vectors[startIndex].y;\r\n                    let y2 = d.vectors[endIndex].y;\r\n                    let slope = (y2 - y1) / (x2 - x1);\r\n                    let lineY = (x - x1) * slope + y1;\r\n                    return {id: d.id, y: lineY};\r\n                });\r\n            }\r\n            yMap.sort((a, b)=> {\r\n                return a.y - b.y;\r\n            });\r\n            if (y < yMap[0].y) {\r\n                series = yMap[0].id;\r\n            } else if (y > yMap[yMap.length - 1].y) {\r\n                series = yMap[yMap.length - 1].id;\r\n            } else {\r\n                series = yMap[0].id;\r\n                for (let i = 0; i < yMap.length - 2; i++) {\r\n                    let startY = yMap[i].y;\r\n                    let endY = yMap[i + 1].y;\r\n                    if (y >= startY && y <= endY) {\r\n                        if (y < (startY + endY) / 2) {\r\n                            series = yMap[i].id;\r\n                        } else {\r\n                            series = yMap[i + 1].id;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        return series;\r\n    }\r\n\r\n    resetColor() {\r\n        let y = this.state.y.map(d=> {\r\n            let max = 230;\r\n            let r = Math.floor(Math.random() * max);\r\n            let g = Math.floor(Math.random() * max);\r\n            let b = Math.floor(Math.random() * max);\r\n            d.color = `rgba(${r},${g},${b},1)`;\r\n            return d;\r\n        });\r\n        this.setState({\r\n            y: y\r\n        })\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = chart;"]}