{"version":3,"sources":["index.jsx"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["let React = require(\"react\");\r\nlet css = require(\"./index.css\");\r\nrequire(\"karl-extend\");\r\nlet $ = require(\"jquery\");\r\n\r\n/**\r\n * chart component,props means:\r\n * title: text on the svg top\r\n * yAxisText: text on the yAxis left\r\n * type: svg chart type,curve or bar,default curve\r\n * x: svg xAxis id\r\n * y: svg yAxis json,like {id:id,name:name}\r\n * data: json contains keys of x and y[id]\r\n */\r\nclass chart extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let data = this.sortData(this.props.data);\r\n        data = this.fillData(data, this.props.y);\r\n        let yAxisNumArr = this.getYAxisNumArr(this.props.y, data);\r\n        let y = this.setColor(this.props.y);\r\n\r\n        this.state = {\r\n            x: this.props.x,\r\n            y: y,\r\n            title: this.props.title,\r\n            yAxisText: this.props.yAxisText,\r\n            type: this.props.type ? this.props.type : \"curve\",\r\n            data: data,\r\n            lineDots: [],\r\n            yAxisNumArr: yAxisNumArr,\r\n            xUnitLength: 100 * 0.8 / data.length,\r\n            yUnitLength: 50 * 0.8 / (yAxisNumArr.length - 1),\r\n            angleNum: this.props.angleNum ? this.props.angleNum : 12,\r\n            endPointLineLength: this.props.endPointLineLength ? this.props.endPointLineLength : 0.1,\r\n            tipsRaisedX: 0.2,\r\n            tipsRaisedY: 0.2,\r\n            tipsMarginBottom: 1,\r\n            tipsPaddingTop: 1,\r\n            tipsPaddingBottom: 1,\r\n            tipsPaddingLeft: 1,\r\n            tipsPaddingRight: 1\r\n        };\r\n        let bindArr = [\"sortData\", \"fillData\", \"vectorTransformToSvg\", \"xTransformToSvg\", \"yTransformToSvg\", \"yTransformToNatural\",\r\n            \"getYAxisNumArr\", \"setActive\", \"getNearestSeries\", \"setColor\", \"setTips\"];\r\n        bindArr.forEach(d => {\r\n            this[d] = this[d].bind(this);\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        let lineDots = this.state.y.map(d => {\r\n            let vectors = this.state.data.map((d1, j) => {\r\n                let id = d.id;\r\n                let x = this.xTransformToSvg(j);\r\n                let y = this.yTransformToSvg(d1[id]);\r\n                let vector = {x: x, y: y};\r\n                return vector;\r\n            });\r\n            return {id: d.id, vectors: vectors};\r\n        });\r\n        let json = {lineDots: lineDots};\r\n        let ua = window.navigator.userAgent;\r\n        if (ua.includes(\"Trident/7.0\") || ua.includes(\"MSIE \")) {\r\n            json.isIE = true;\r\n            json.svgWidth = $(this.svg).width();\r\n            json.svgHeight = $(this.svg).width() * 60 / 110;\r\n        } else {\r\n            switch (this.state.type) {\r\n                case \"curve\":\r\n                    this.state.y.forEach(d => {\r\n                        let length = this[\"curve\" + d.id].getTotalLength();\r\n                        $(this[\"curve\" + d.id]).css({\r\n                            \"stroke-dasharray\": length,\r\n                            \"stroke-dashoffset\": length\r\n                        });\r\n                    });\r\n                    break;\r\n                case \"bar\":\r\n                    this.state.y.forEach(d => {\r\n                        this.state.data.forEach((d1, i) => {\r\n                            let length = this[\"bar\" + d.id + i].getTotalLength();\r\n                            $(this[\"bar\" + d.id + i]).css({\r\n                                \"stroke-dasharray\": length,\r\n                                \"stroke-dashoffset\": length\r\n                            });\r\n                        });\r\n                    });\r\n                    break;\r\n            }\r\n        }\r\n\r\n        this.setState(json);\r\n\r\n\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (!((prevState.tipsX == this.state.tipsX) && (prevState.tipsY == this.state.tipsY)) && this.state.tipsX && this.state.tipsY) {\r\n            let w = $(this.tipsText).width() / $(this.svg).width() * 110;\r\n            w = w.toFixed(2);\r\n            w = Number.parseFloat(w);\r\n            let h = $(this.tipsText).height() / $(this.svg).height() * 60;\r\n            h = h.toFixed(2);\r\n            h = Number.parseFloat(h);\r\n            this.setState({\r\n                tipsWidth: w,\r\n                tipsHeight: h\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let svgChild =\r\n            <g>\r\n                {\r\n                    this.state.title ? <g className={css.title}>\r\n                        <text x=\"50\" y=\"3\">{this.state.title}</text>\r\n                    </g> : \"\"\r\n                }\r\n                <g className={css.xAxis}>\r\n                    <path d=\"M10 55 h 80\"/>\r\n                    {\r\n                        this.state.data.map((d, i) => {\r\n                            let w = this.state.xUnitLength;\r\n                            let x = i * w + 10;\r\n                            return <g key={i}>\r\n                                <path d={`M${x} 55 v1`}/>\r\n                                <text x={x + w / 2} y={60}>{d[this.state.x]}</text>\r\n                            </g>\r\n                        })\r\n                    }\r\n                </g>\r\n                <g className={css.yAxis}>\r\n                    {\r\n                        this.state.yAxisNumArr.map((d, i) => {\r\n                            let y = 55 - i * this.state.yUnitLength;\r\n                            let yTextDelta = 0;\r\n                            return <text key={i} x={9} y={y + yTextDelta}>{d}</text>\r\n                        })\r\n                    }\r\n                </g>\r\n                {\r\n                    this.state.yAxisText ? <g className={css.yAxisText}>\r\n                        <text x=\"3\" y=\"35\" transform=\"rotate(-90,3,35)\">{this.state.yAxisText}</text>\r\n                    </g> : \"\"\r\n                }\r\n\r\n                <g className={css.xGrid}>\r\n                    {\r\n                        this.state.yAxisNumArr.map((d, i) => {\r\n                            let y = 55 - i * this.state.yUnitLength;\r\n                            return <path key={i} d={`M10 ${y} h 80`}/>\r\n                        })\r\n                    }\r\n                    <path d={`M90 55 v1`}/>\r\n                </g>\r\n                {\r\n                    this.renderData()\r\n                }\r\n\r\n                <g className={css.dots}>\r\n                    {\r\n                        this.state.type == \"curve\" ?\r\n                            this.state.lineDots.map((d, i) => {\r\n                                return d.vectors.map(d1 => {\r\n                                    let dots = this.getDotsSymbol(i, d1.x, d1.y, d.id);\r\n                                    return dots;\r\n                                })\r\n                            }) : \"\"\r\n                    }\r\n                </g>\r\n                <g className={css.declare}>\r\n                    {\r\n                        this.state.y.map((d, i) => {\r\n                            let x = 91;\r\n                            let y = 15 + (40 - this.state.y.length * this.state.yUnitLength) / 2 + i * this.state.yUnitLength;\r\n                            let color = d.color;\r\n                            let symbol;\r\n                            switch (this.state.type) {\r\n                                case \"curve\":\r\n                                    symbol = <g key={i}>\r\n                                        <path style={this.state[\"dot-\" + d.id + \"-active\"] ? {strokeWidth: 0.6} : {}}\r\n                                              stroke={color} d={`M${x} ${y} h3`}/>\r\n                                        {\r\n                                            this.getDotsSymbol(i, 92.5, y, d.id)\r\n                                        }\r\n                                        <text x=\"94.5\" y={y + 1}>{d.name}</text>\r\n                                    </g>;\r\n                                    break;\r\n                                case \"bar\":\r\n                                    let offsetX = this.state[\"dot-\" + d.id + \"-active\"] ? 0.2 : 0;\r\n                                    let offsetY = this.state[\"dot-\" + d.id + \"-active\"] ? 0.2 : 0;\r\n                                    symbol = <g key={i}>\r\n                                        <rect fill={color} x={x - offsetX} y={y - offsetY} width={3 + offsetX * 2}\r\n                                              height={1 + offsetY * 2}/>\r\n                                        <text x=\"94.5\" y={y + 1}>{d.name}</text>\r\n                                    </g>;\r\n                                    break;\r\n                            }\r\n                            return symbol;\r\n                        })\r\n                    }\r\n                    <g className={css.setColor} onClick={() => {\r\n                        this.setColor();\r\n                    }}>\r\n                        {\r\n                            this.state.y.map((d, i) => {\r\n                                let color = d.color;\r\n                                let x = 80 + i * 1;\r\n                                let y1 = 5;\r\n                                let y2 = 7;\r\n                                return <path key={i} strokeWidth={1} stroke={color}\r\n                                             d={`M${x} ${y1} L${x} ${y2}`}/>\r\n                            })\r\n                        }\r\n                        <text x={79.5 + this.state.y.length / 2} y=\"4\" textAnchor=\"middle\">reset color</text>\r\n                    </g>\r\n                    {\r\n                        this.setTypeList()\r\n                    }\r\n                </g>\r\n                {\r\n                    (this.state.tipsX && this.state.tipsY) ?\r\n                        <g className={css.tips}>\r\n                            {\r\n                                this.setTips()\r\n                            }\r\n                            {\r\n                                this.setTipsText()\r\n                            }\r\n                        </g>\r\n                        : \"\"\r\n                }</g>;\r\n\r\n        let svgTag = this.state.svgWidth ?\r\n            <svg viewBox=\"0 0 110 60\" width={this.state.svgWidth} height={this.state.svgHeight}\r\n                 onMouseMove={this.setActive}\r\n                 ref={(svg) => {\r\n                     this.svg = svg;\r\n                 }}>\r\n                {\r\n                    svgChild\r\n                }\r\n            </svg> :\r\n            <svg viewBox=\"0 0 110 60\" onMouseMove={this.setActive} ref={(svg) => {\r\n                this.svg = svg;\r\n            }}>\r\n                {\r\n                    svgChild\r\n                }\r\n            </svg>;\r\n        return (\r\n            <div className={css.base + \" react-chart\"}>\r\n                {\r\n                    svgTag\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * set type list icon\r\n     * @returns {XML}\r\n     */\r\n    setTypeList() {\r\n        let activeStyle = {};\r\n        let inactiveStyle = {opacity: 0.3};\r\n        let iconUnderlineStartX = this.state.type == \"curve\" ? 91 : 95;\r\n        let list = <g className={css.typeList}>\r\n            <path d={`M${iconUnderlineStartX} 3.5 l3 0`} stroke=\"black\" strokeWidth={0.2}/>\r\n            <g className={css.typeIcon} onClick={() => {\r\n                this.setState({\r\n                    type: \"curve\"\r\n                });\r\n            }}>\r\n                <path className={css.iconBackground} d={`M91 1 h3 v3 h-3 z`}></path>\r\n                <path fill=\"none\" d={`M91 2 l0.5 0 l0.5 -1 l0.5 2 l0.5 -1 l1 0`}\r\n                      style={(this.state.type == \"curve\") ? activeStyle : inactiveStyle}/>\r\n            </g>\r\n            <g className={css.typeIcon} onClick={() => {\r\n                this.setState({\r\n                    type: \"bar\"\r\n                });\r\n            }}>\r\n                <path className={css.iconBackground} d={`M95 1 h3 v3 h-3 z`}></path>\r\n                <path fill=\"none\" d={`M95.1 2 h0.8 v1 h-0.8 z`}\r\n                      style={(this.state.type == \"bar\") ? activeStyle : inactiveStyle}/>\r\n                <path fill=\"none\" d={`M96.1 1.5 h0.8 v1.5 h-0.8 z`}\r\n                      style={(this.state.type == \"bar\") ? activeStyle : inactiveStyle}/>\r\n                <path fill=\"none\" d={`M97.1 1 h0.8 v2 h-0.8 z`}\r\n                      style={(this.state.type == \"bar\") ? activeStyle : inactiveStyle}/>\r\n            </g>\r\n        </g>;\r\n        return list;\r\n    }\r\n\r\n    /**\r\n     * sort data by x axis value\r\n     * @param d\r\n     * @returns {Array.<T>|string|Buffer|*|{options, browsertest, dist, rhino, rhinolessc}}\r\n     */\r\n    sortData(d) {\r\n        let data = d.concat();\r\n        let regex = new RegExp(/^[1-2]\\d{3}-((0[1-9])|(1[0-2])|[1-9])-((0[1-9])|([1-2]\\d)|(3[0-1])|[1-9])$/);\r\n        let isDate = data.every(d1 => {\r\n            return regex.test(d1[this.props.x]);\r\n        });\r\n        if (isDate) {\r\n            data.sort((a, b) => {\r\n                let arr1 = a[this.props.x].split(\"-\");\r\n                let arr2 = b[this.props.x].split(\"-\");\r\n                if (arr1[0] != arr2[0]) {\r\n                    return arr1[0] - arr2[0];\r\n                } else if (arr1[1] != arr2[1]) {\r\n                    return arr1[1] - arr2[1];\r\n                } else if (arr1[2] != arr2[2]) {\r\n                    return arr1[2] - arr2[2];\r\n                } else {\r\n                    return 0;\r\n                }\r\n            });\r\n        }\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * fill 0 if y don't have value\r\n     * @param data\r\n     * @param y\r\n     * @returns {*}\r\n     */\r\n    fillData(data, y) {\r\n        data = data.map(d => {\r\n            y.forEach(d1 => {\r\n                if (!d.hasOwnProperty(d1.id)) {\r\n                    d[d1.id] = 0;\r\n                }\r\n            });\r\n            return d;\r\n        });\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param yData this.props.y\r\n     * @param data this.props.data\r\n     * @returns {Array}\r\n     */\r\n    getYAxisNumArr(yData, data) {\r\n        //get max y num and min y num\r\n        let max, min;\r\n        yData.forEach(d => {\r\n            data.forEach(d1 => {\r\n                let d2 = d1[d.id];\r\n                if (max == undefined) {\r\n                    max = d2;\r\n                } else {\r\n                    max = Math.max(d2, max);\r\n                }\r\n                if (min == undefined) {\r\n                    min = d2;\r\n                } else {\r\n                    min = Math.min(d2, min);\r\n                }\r\n            })\r\n        });\r\n\r\n        let yStart = Math.abs(min);\r\n        let yEnd = Math.abs(max);\r\n        let pStart, pEnd = 0;\r\n        if (yStart < 1 && yEnd < 1) {\r\n            //from 0 to lower\r\n            if (yStart != 0) {\r\n                pStart = 0;\r\n                while (yStart * 10 <= 1) {\r\n                    yStart = yStart * 10;\r\n                    pStart--;\r\n                }\r\n            }\r\n            while (yEnd * 10 <= 1) {\r\n                yEnd = yEnd * 10;\r\n                pEnd--;\r\n            }\r\n        } else {\r\n            //from 10 to bigger\r\n            pStart = 0;\r\n            pStart++;\r\n            pEnd++;\r\n            while (yStart / 10 > 1) {\r\n                yStart = yStart / 10;\r\n                pStart++;\r\n            }\r\n            while (yEnd / 10 > 1) {\r\n                yEnd = yEnd / 10;\r\n                pEnd++;\r\n            }\r\n        }\r\n\r\n        //get calibration start and end\r\n        let p;\r\n        if (pStart == undefined) {\r\n            p = pEnd;\r\n        } else {\r\n            p = Math.max(pStart, pEnd);\r\n        }\r\n        let yAixsStart, yAixsEnd;\r\n        let calibration = Math.pow(10, p - 1);\r\n        if (min < 0 && max < 0) {\r\n            yAixsStart = -Math.pow(10, p);\r\n            yAixsEnd = 0;\r\n        } else if (min < 0 && max >= 0) {\r\n            yAixsStart = -Math.pow(10, p);\r\n            yAixsEnd = Math.pow(10, p);\r\n            calibration = calibration * 2;\r\n        } else if (min >= 0 && max >= 0) {\r\n            yAixsStart = 0;\r\n            yAixsEnd = Math.pow(10, p);\r\n        }\r\n        let calibrationStart, calibrationEnd;\r\n        for (let i = yAixsStart; i <= yAixsEnd; i = i + calibration) {\r\n            if (p <= 0) {\r\n                let scale = Math.pow(10, -p + 1);\r\n                if ((i * scale + calibration * scale) >= min * scale) {\r\n                    calibrationStart = i;\r\n                    break;\r\n                }\r\n            } else {\r\n                if ((i + calibration) >= min) {\r\n                    calibrationStart = i;\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n        for (let i = yAixsStart; i <= yAixsEnd; i = i + calibration) {\r\n            if (p <= 0) {\r\n                let scale = Math.pow(10, -p + 1);\r\n                if ((i * scale + calibration * scale) >= max * scale) {\r\n                    calibrationEnd = (i * scale + calibration * scale) / scale;\r\n                    break;\r\n                }\r\n            } else {\r\n                if ((i + calibration) >= max) {\r\n                    calibrationEnd = i + calibration;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let yAxisNumArr = [];\r\n        let n;\r\n        if (p <= 0) {\r\n            let scale = Math.pow(10, -p + 1);\r\n            n = (calibrationEnd * scale - calibrationStart * scale) / (calibration * scale);\r\n        } else {\r\n            n = (calibrationEnd - calibrationStart) / calibration;\r\n        }\r\n        let step = calibration;\r\n        let fixedNum = -p + 1;\r\n        switch (n) {\r\n            case 1:\r\n            case 2:\r\n                step = (calibrationEnd - calibrationStart) / 10;\r\n                fixedNum++;\r\n                break;\r\n            case 3:\r\n                step = (calibrationEnd - calibrationStart) / 6;\r\n                fixedNum++;\r\n                break;\r\n            case 4:\r\n                step = (calibrationEnd - calibrationStart) / 8;\r\n                fixedNum++;\r\n                break;\r\n        }\r\n\r\n        for (let i = calibrationStart; i <= calibrationEnd; i = i + step) {\r\n            let d = i;\r\n            if (p <= 0) {\r\n                d = d.toFixed(fixedNum);\r\n            }\r\n            yAxisNumArr.push(d);\r\n        }\r\n        return yAxisNumArr;\r\n    }\r\n\r\n    /**\r\n     * transform vector x,y to svg coordinates\r\n     * @param vector\r\n     * @returns {{x: *, y: *}}\r\n     */\r\n    vectorTransformToSvg(vector) {\r\n        let {x, y} = vector;\r\n        x = this.xTransformToSvg(x);\r\n        y = this.yTransformToSvg(y);\r\n        return {x: x, y: y};\r\n    }\r\n\r\n    /**\r\n     * transform x to svg coordinates\r\n     * @param x\r\n     * @returns {number|*}\r\n     */\r\n    xTransformToSvg(x) {\r\n        let w = this.state.xUnitLength;\r\n        x = x * w + 10 + w / 2;\r\n        return x;\r\n    }\r\n\r\n    /**\r\n     * transform y to svg coordinates\r\n     * @param y\r\n     * @returns {*}\r\n     */\r\n    yTransformToSvg(y) {\r\n        let min, max;\r\n        this.state.yAxisNumArr.forEach(d => {\r\n            if (min == undefined) {\r\n                min = d;\r\n            } else {\r\n                min = Math.min(min, d);\r\n            }\r\n            if (max == undefined) {\r\n                max = d;\r\n            } else {\r\n                max = Math.max(max, d);\r\n            }\r\n        });\r\n        let yPercent = (y - min) / (max - min);\r\n        yPercent = 1 - yPercent;\r\n        y = 15 + yPercent * 40;\r\n        return y;\r\n    }\r\n\r\n    /**\r\n     * transform y to natural coordinates\r\n     * @param y\r\n     * @returns {number|*}\r\n     */\r\n    yTransformToNatural(y) {\r\n        let min, max;\r\n        this.state.yAxisNumArr.forEach(d => {\r\n            if (min == undefined) {\r\n                min = d;\r\n            } else {\r\n                min = Math.min(min, d);\r\n            }\r\n            if (max == undefined) {\r\n                max = d;\r\n            } else {\r\n                max = Math.max(max, d);\r\n            }\r\n        });\r\n        let yPercent = (55 - y) / 55;\r\n        y = (max - min) * yPercent + min;\r\n        return y;\r\n    }\r\n\r\n    /**\r\n     * get bezier curve point x1,y1 and x2,y2\r\n     * @param lastX\r\n     * @param lastY\r\n     * @param x\r\n     * @param y\r\n     * @returns {{x1: (number|*), y1: *, x2: (number|*), y2: *}}\r\n     */\r\n    getBezierCurvesVector(lastX, lastY, x, y) {\r\n        let angleNum = this.state.angleNum;\r\n        angleNum = angleNum / 180 * Math.PI;\r\n        let endPointLineLength = this.state.endPointLineLength;\r\n        let x1, y1, x2, y2;\r\n        let pathLength = Math.sqrt(Math.pow(Math.abs(y - lastY), 2) + Math.pow(x - lastX, 2));\r\n        let length = pathLength * endPointLineLength;\r\n        let atanAngle = Math.atan(Math.abs(y - lastY) / (x - lastX));\r\n        let anglePoint1 = Math.PI - angleNum - atanAngle;\r\n        let anglePoint2 = Math.PI - angleNum - (Math.PI / 2 - atanAngle);\r\n        let anglePoint1X = Math.cos(anglePoint1) * length;\r\n        let anglePoint1Y = Math.sin(anglePoint1) * length;\r\n        let anglePoint2X = Math.sin(anglePoint2) * length;\r\n        let anglePoint2Y = Math.cos(anglePoint2) * length;\r\n        x1 = Number.parseInt(lastX - anglePoint1X);\r\n        x2 = Number.parseInt(x - anglePoint2X);\r\n        if (y > lastY) {\r\n            //line goes lower\r\n            y1 = Number.parseInt(lastY + anglePoint1Y);\r\n            y2 = Number.parseInt(y + anglePoint2Y);\r\n        } else {\r\n            //line goes higher\r\n            y1 = Number.parseInt(lastY - anglePoint1Y);\r\n            y2 = Number.parseInt(y - anglePoint2Y);\r\n        }\r\n\r\n\r\n        let vector = {\r\n            x1: x1,\r\n            y1: y1,\r\n            x2: x2,\r\n            y2: y2\r\n        };\r\n        return vector;\r\n    }\r\n\r\n    /**\r\n     * get dots symbol\r\n     * @param index\r\n     * @param x\r\n     * @param y\r\n     * @param id\r\n     * @returns {*}\r\n     */\r\n    getDotsSymbol(index, x, y, id) {\r\n        let dots, r;\r\n        let color = this.state.y[index].color;\r\n        switch (index % 5) {\r\n            //circle\r\n            case 0:\r\n                r = 0.3;\r\n                dots = <circle stroke={color} fill={color} cx={x} cy={y} r={r}\r\n                               style={this.state[\"dot-\" + id + \"-active\"] ? {strokeWidth: 0.6} : {}}/>;\r\n                break;\r\n            //square\r\n            case 1:\r\n                r = 0.4;\r\n                dots = <path stroke={color} fill={color} d={`M${x - r / 2} ${y - r / 2} h${r} v${r} h-${r} z`}\r\n                             style={this.state[\"dot-\" + id + \"-active\"] ? {strokeWidth: 0.6} : {}}/>;\r\n                break;\r\n            //square rotate -45 angle\r\n            case 2:\r\n                r = 0.4;\r\n                dots = <path stroke={color} fill={color} transform={`rotate(-45,${x},${y})`}\r\n                             d={`M${x - r / 2} ${y - r / 2} h${r} v${r} h-${r} z`}\r\n                             style={this.state[\"dot-\" + id + \"-active\"] ? {strokeWidth: 0.6} : {}}/>;\r\n                break;\r\n            //triangle\r\n            case 3:\r\n                r = 0.4;\r\n                dots = <path stroke={color} fill={color} d={`M${x - r / 2} ${y + r / 2} h${r} L${x} ${y - r / 2} z`}\r\n                             style={this.state[\"dot-\" + id + \"-active\"] ? {strokeWidth: 0.6} : {}}/>;\r\n                break;\r\n            //inverted triangle\r\n            case 4:\r\n                r = 0.4;\r\n                dots = <path stroke={color} fill={color} d={`M${x - r / 2} ${y - r / 2} h${r} L${x} ${y + r / 2} z`}\r\n                             style={this.state[\"dot-\" + id + \"-active\"] ? {strokeWidth: 0.6} : {}}/>;\r\n                break;\r\n\r\n        }\r\n        return dots;\r\n    }\r\n\r\n    /**\r\n     * set active when mouse hover\r\n     * @param e\r\n     */\r\n    setActive(e) {\r\n        let offset = $(this.svg).offset();\r\n        let x = e.pageX - offset.left;\r\n        let y = e.pageY - offset.top;\r\n        x = x / $(this.svg).width() * 110;\r\n        y = y / $(this.svg).height() * 60;\r\n        let {series, tipsX, tipsY, activeX} = this.getNearestSeries(x, y);\r\n        if (series) {\r\n            let json = {tipsX: tipsX, tipsY: tipsY, activeSeries: series, activeX: activeX};\r\n            json[\"dot-\" + series + \"-active\"] = true;\r\n            json[\"curve-\" + series + \"-active\"] = true;\r\n            this.state.y.filter(d => {\r\n                return d.id != series;\r\n            }).forEach(d => {\r\n                json[\"dot-\" + d.id + \"-active\"] = false;\r\n                json[\"curve-\" + d.id + \"-active\"] = false;\r\n            });\r\n            this.setState(json);\r\n        } else {\r\n            let json = {tipsX: tipsX, tipsY: tipsY, activeSeries: series, activeX: activeX};\r\n            this.state.y.forEach(d => {\r\n                json[\"dot-\" + d.id + \"-active\"] = false;\r\n                json[\"curve-\" + d.id + \"-active\"] = false;\r\n            });\r\n            this.setState(json);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * find the nearest series\r\n     * @param x svgX\r\n     * @param y svgY\r\n     * @returns {*} series\r\n     */\r\n    getNearestSeries(x, y) {\r\n        let series;\r\n        let tipsX, tipsY, index, activeX;\r\n        if (x >= 10 && x <= 90 && y >= 15 && y <= 55) {\r\n            let w = this.state.xUnitLength;\r\n\r\n            switch (this.state.type) {\r\n                case \"curve\":\r\n                    //find the corresponding y by x and slope\r\n                    let yMap = [];\r\n                    if (x <= 10 + w / 2) {\r\n                        tipsX = 10 + w / 2;\r\n                        index = 0;\r\n                        yMap = this.state.lineDots.map(d => {\r\n                            let lineY = d.vectors[0].y;\r\n                            return {id: d.id, y: lineY};\r\n                        });\r\n                    } else if (x >= 90 - w / 2) {\r\n                        tipsX = 10 + w / 2 + (this.state.data.length - 1) * w;\r\n                        index = this.state.data.length - 1;\r\n                        yMap = this.state.lineDots.map(d => {\r\n                            let lineY = d.vectors[d.vectors.length - 1].y;\r\n                            return {id: d.id, y: lineY};\r\n                        });\r\n                    } else {\r\n                        let startIndex, endIndex;\r\n                        for (let i = 0; i < this.state.data.length - 1; i++) {\r\n                            let startX = 10 + i * w + w / 2;\r\n                            let endX = 10 + (i + 1) * w + w / 2;\r\n                            if (x >= startX && x <= endX) {\r\n                                startIndex = i;\r\n                                endIndex = i + 1;\r\n                                break;\r\n                            }\r\n                        }\r\n                        let x1 = 10 + startIndex * w + w / 2;\r\n                        let x2 = 10 + endIndex * w + w / 2;\r\n                        if (x <= (x1 + x2) / 2) {\r\n                            tipsX = 10 + w / 2 + startIndex * w;\r\n                            index = startIndex;\r\n                        } else {\r\n                            tipsX = 10 + w / 2 + endIndex * w;\r\n                            index = endIndex;\r\n                        }\r\n\r\n                        yMap = this.state.lineDots.map(d => {\r\n                            let y1 = d.vectors[startIndex].y;\r\n                            let y2 = d.vectors[endIndex].y;\r\n                            let slope = (y2 - y1) / (x2 - x1);\r\n                            let lineY = (x - x1) * slope + y1;\r\n                            return {id: d.id, y: lineY};\r\n                        });\r\n                    }\r\n                    yMap.sort((a, b) => {\r\n                        return a.y - b.y;\r\n                    });\r\n                    if (y < yMap[0].y) {\r\n                        series = yMap[0].id;\r\n                    } else if (y > yMap[yMap.length - 1].y) {\r\n                        series = yMap[yMap.length - 1].id;\r\n                    } else {\r\n                        for (let i = 0; i < yMap.length - 1; i++) {\r\n                            let startY = yMap[i].y;\r\n                            let endY = yMap[i + 1].y;\r\n                            if (y >= startY && y <= endY) {\r\n                                if (y < (startY + endY) / 2) {\r\n                                    series = yMap[i].id;\r\n                                } else {\r\n                                    series = yMap[i + 1].id;\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    let vectors = this.state.lineDots.find(d => {\r\n                        return d.id == series;\r\n                    }).vectors;\r\n                    let vector = vectors[index];\r\n                    tipsY = vector.y;\r\n                    activeX = this.state.data[index][this.state.x];\r\n                    break;\r\n                case \"bar\":\r\n                    let barWidth = this.state.xUnitLength / ((this.state.y.length + 2) * 1.5);\r\n                    for (let i = 0; i < this.state.y.length; i++) {\r\n                        for (let j = 0; j < this.state.data.length; j++) {\r\n                            let offsetX = (i - this.state.y.length / 2) * barWidth * 1.5 + 0.25 * barWidth;\r\n                            let barStartX = this.xTransformToSvg(j) + offsetX;\r\n                            let barEndX = barStartX + barWidth;\r\n                            if (x >= barStartX && x <= barEndX) {\r\n                                series = this.state.y[i].id;\r\n                                tipsX = barStartX + barWidth / 2;\r\n                                tipsY = this.yTransformToSvg(this.state.data[j][series]);\r\n                                activeX = this.state.data[j][this.state.x];\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n\r\n        }\r\n        return {series: series, tipsX: tipsX, tipsY: tipsY, activeX: activeX};\r\n    }\r\n\r\n    /**\r\n     * render data by chart type\r\n     * @returns {*}\r\n     */\r\n    renderData() {\r\n        let g;\r\n        switch (this.state.type) {\r\n            case \"curve\":\r\n                g = <g className={css.curve}>\r\n                    {\r\n                        this.state.y.map((d, i) => {\r\n                            let lastX, lastY;\r\n                            let path = this.state.data.map((d1, j) => {\r\n                                let id = d.id;\r\n                                let x = this.xTransformToSvg(j);\r\n                                let y = this.yTransformToSvg(d1[id]);\r\n                                let p = \"\";\r\n                                if (j == 0) {\r\n                                    p = `M ${x} ${y}`;\r\n                                } else {\r\n                                    let {x1, y1, x2, y2} = this.getBezierCurvesVector(lastX, lastY, x, y);\r\n                                    p = `C ${x1} ${y1},${x2} ${y2},${x} ${y}`;\r\n                                }\r\n                                lastX = x;\r\n                                lastY = y;\r\n                                return p;\r\n                            }).join(\" \");\r\n                            let color = d.color;\r\n                            let style = this.state[\"curve-\" + d.id + \"-active\"] ? {strokeWidth: 0.4} : {};\r\n                            return <path stroke={color} key={i} d={path} ref={curve => {\r\n                                this[\"curve\" + d.id] = curve;\r\n                            }} style={style}/>\r\n                        })\r\n                    }\r\n                </g>;\r\n                break;\r\n            case \"bar\":\r\n                g = <g className={css.bar}>\r\n                    {\r\n                        this.state.y.map((d, i) => {\r\n                            return this.state.data.map((d1, j) => {\r\n                                let id = d.id;\r\n                                let barWidth = this.state.xUnitLength / ((this.state.y.length + 2) * 1.5);\r\n                                let offsetX = (i - this.state.y.length / 2) * barWidth * 1.5 + 0.25 * barWidth;\r\n                                let x = this.xTransformToSvg(j) + offsetX + barWidth / 2;\r\n                                let y = this.yTransformToSvg(d1[id]);\r\n                                return <path stroke={d.color} strokeWidth={barWidth}\r\n                                             d={`M${x} ${this.yTransformToSvg(0)} L${x} ${y}`}\r\n                                             ref={bar => {\r\n                                                 this[\"bar\" + id + j] = bar;\r\n                                             }}/>;\r\n                            })\r\n\r\n                        })\r\n                    }\r\n                </g>;\r\n                break;\r\n            default:\r\n                g = \"\";\r\n                break;\r\n        }\r\n        return g;\r\n    }\r\n\r\n    /**\r\n     * set color\r\n     * @param propsY\r\n     * @returns {*}\r\n     */\r\n    setColor(propsY) {\r\n        let y = (propsY == undefined) ? this.state.y : propsY;\r\n        y = y.map(d => {\r\n            let max = 230;\r\n            let r = Math.floor(Math.random() * max);\r\n            let g = Math.floor(Math.random() * max);\r\n            let b = Math.floor(Math.random() * max);\r\n            d.color = `rgba(${r},${g},${b},1)`;\r\n            return d;\r\n        });\r\n        if (propsY != undefined) {\r\n            return y;\r\n        } else {\r\n            this.setState({\r\n                y: y\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * set tips text\r\n     * @returns {XML}\r\n     */\r\n    setTipsText() {\r\n        let startX = this.state.tipsX;\r\n        let startY = this.state.tipsY - this.state.tipsMarginBottom - this.state.tipsRaisedY - this.state.tipsPaddingBottom;\r\n        let color = this.state.y.find(d => {\r\n            return d.id == this.state.activeSeries;\r\n        }).color;\r\n        let xText = this.state.activeX;\r\n        let yText = this.state.data.find(d => {\r\n            return d[this.state.x] == xText;\r\n        })[this.state.activeSeries];\r\n        let text = <text color={color} x={startX} y={startY} ref={d => {\r\n            this.tipsText = d;\r\n        }}>\r\n            {this.state.activeSeries} : {yText}\r\n        </text>;\r\n        return text;\r\n    }\r\n\r\n    /**\r\n     * set tips border\r\n     * @returns {*}\r\n     */\r\n    setTips() {\r\n        let arcRx = 0.5, arcRy = 0.5;\r\n        let startX = this.state.tipsX;\r\n        let startY = this.state.tipsY - this.state.tipsMarginBottom;\r\n        let color = this.state.y.find(d => {\r\n            return d.id == this.state.activeSeries;\r\n        }).color;\r\n        let path = this.state.tipsWidth ?\r\n            <path stroke={color}\r\n                  d={`M${startX} ${startY} l${-this.state.tipsRaisedX} ${-this.state.tipsRaisedY}\r\n                  l${-(this.state.tipsWidth / 2 - this.state.tipsRaisedX + this.state.tipsPaddingLeft)} 0\r\n                  a${arcRx} ${arcRy} 0 0 1 ${-arcRx} ${-arcRy}\r\n                  l0 ${-(this.state.tipsHeight + this.state.tipsPaddingBottom + this.state.tipsPaddingTop - arcRy)}\r\n                  l${this.state.tipsWidth + this.state.tipsPaddingLeft + this.state.tipsPaddingRight + arcRx * 2} 0\r\n                  l0 ${(this.state.tipsHeight + this.state.tipsPaddingBottom + this.state.tipsPaddingTop - arcRy)}\r\n                  a${arcRx} ${arcRy} 0 0 1 ${-arcRx} ${arcRy}\r\n                  l${-(this.state.tipsWidth / 2 - this.state.tipsRaisedX + this.state.tipsPaddingRight)} 0 z`}/>\r\n            : \"\";\r\n        return path;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = chart;"]}